require 'ldusk'
require 'lduster'
require 'vector'

global function ai_plan_moves(team_id: cint, move_buf: *QueuedMove, move_buf_len: cint): cint
    -- plan moves for a particular team

    local moves: *[0]QueuedMove = move_buf
    local move_ix = 0

    -- -- for now, fill it up with placeholder moves
    -- moves[0] = {type = QUEUEDMOVE_MOVE, pawn0 = LPAWN_GID(team_id, 0), start_pos = (@VPos16){1, 1}, end_pos = (@VPos16){8, 8}}
    -- moves[1] = {type = QUEUEDMOVE_MOVE, pawn0 = LPAWN_GID(team_id, 1), start_pos = (@VPos16){1, 1}, end_pos = (@VPos16){9, 8}}
    -- moves[2] = {type = QUEUEDMOVE_MOVE, pawn0 = LPAWN_GID(team_id, 2), start_pos = (@VPos16){1, 1}, end_pos = (@VPos16){10, 8}}

    local my_pawns: vector(cshort) = {}

    -- scan all pawns
    for pawn_ix = 0, TEAM_MAX_PAWNS - 1 do
        local pawn_gid = LPAWN_GID(team_id, pawn_ix)
        local pawn: *Pawn = game_get_pawn_by_gid(pawn_gid)

        if pawn.alive then
            my_pawns:push(pawn_gid)
        end
    end

    -- move everyone forward
    for i = 0, my_pawns.size - 1 do
        local pawn_gid = my_pawns[i]
        local pawn: *Pawn = game_get_pawn_by_gid(pawn_gid)
        local curr_tile = board_find_pawn_tile(pawn_gid)
        local curr_tile_pos = board_util_tid_to_pos(curr_tile)

        local dest_pos = curr_tile_pos
        dest_pos.y = dest_pos.y + 1

        -- add a move for this pawn
        moves[move_ix] = {type = QUEUEDMOVE_MOVE, pawn0 = pawn_gid, start_pos = curr_tile_pos, end_pos = dest_pos}

        -- increment move index
        move_ix = move_ix + 1
    end

    -- clean up
    my_pawns:destroy()

    -- return how many moves were planned
    return move_ix + 1
end